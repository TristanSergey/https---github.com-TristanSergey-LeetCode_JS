// Учитывая целочисленную матрицу размера m x n, если элемент равен 0, 
// установите всю ее строку и столбец в 0.
// Вы должны сделать это на месте
// 73
// Если какая - либо ячейка матрицы имеет ноль, мы можем записать номер ее строки и столбца, 
// используя дополнительную память.Но если вы не хотите использовать дополнительную память, 
// вы можете вместо этого манипулировать массивом.то есть моделируя именно то, о чем говорится в вопросе.

// Установка нулевых значений ячеек на лету во время итерации может привести к несоответствиям.
// Что, если в качестве маркера вы используете какое - нибудь другое целочисленное значение ? 
// Есть еще лучший подход к этой проблеме с пространством 0(1).

// Мы могли бы использовать два набора для хранения записей строк / столбцов, которые необходимо обнулить.
// Но для пространственного решения O(1) вы можете использовать одну из строк и один из столбцов 
// для отслеживания этой информации.

// Мы можем использовать первую ячейку каждой строки и столбца в качестве флага.Этот флаг будет определять, 
// установлено ли для строки или столбца нулевое значение.


matrix = [[1, 1, 1], [1, 0, 1], [1, 1, 1]]
matrix = [[0, 1, 2, 0], [3, 4, 5, 2], [1, 3, 1, 5]]

var setZeroes = function (matrix) {

    let hashRow = new Set();
    let hashCol = new Set();

    for (let i = 0; i < matrix.length; i++) {
        for (let j = 0; j < matrix[i].length; j++) {
            if (matrix[i][j] === 0) {
                hashCol.add(j);
                hashRow.add(i);
            }
        }
    }

    console.log(hashCol)
    console.log(hashRow)


    for (let i = 0; i < matrix.length; i++) {
        for (let j = 0; j < matrix[i].length; j++) {
            console.log('++++++++++++++++++++++++')
            console.log(i + ' - i')
            console.log(j + ' - j')
            if (hashRow.has(i)) matrix[i][j] = 0;
            if (hashCol.has(j)) matrix[i][j] = 0;
            console.log('++++++++++++++++++++++++')
        }
    }


    console.log(matrix)

};


console.log(setZeroes(matrix))